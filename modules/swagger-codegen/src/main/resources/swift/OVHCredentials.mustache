//  OVHCredentials.swift
//
//  Generated by swagger-codegen
//  Copyright Â© 2016 OVH SAS. All rights reserved.
//

import Foundation
import CryptoSwift
import Alamofire

final public class OVHCredentials {

    // These are the names of the headers to include to your requests.
    static public let applicationHeaderName = "X-Ovh-Application"
    static public let consumerHeaderName = "X-Ovh-Consumer"
    static public let timestampHeaderName = "X-Ovh-Timestamp"
    static public let signatureHeaderName = "X-Ovh-Signature"

    // Singleton object.
    static public let sharedCredentials = OVHCredentials()

    // You must provide the value of these parameters.
    public var applicationKey: String?
    public var applicationSecret: String?
    public var consumerKey: String?

    // Call the method 'updateDeltaTime' to update the delta time between the API servers and your device.
    private var deltaTime: Int = 0

    // Return an array representing the headers to add to your requests to sign them.
    public func getAuthenticationHeadersWithSignature(signed: Bool, url: String?, method: String?, andBody body: String?) -> [String:String]? {
        if !signed {
            if let applicationKey = applicationKey {
                return [OVHCredentials.applicationHeaderName: applicationKey]
            }
        } else {
            if let applicationKey = applicationKey, applicationSecret = applicationSecret, consumerKey = consumerKey, url = url, method = method, body = body {
                let timestamp = String(Int(NSDate().timeIntervalSince1970) + deltaTime)
                let toSign = "\(applicationSecret)+\(consumerKey)+\(method)+\(url)+\(body)+\(timestamp)"
                let signature = "$1$\(toSign.sha1())"
                return [OVHCredentials.applicationHeaderName: applicationKey, OVHCredentials.consumerHeaderName: consumerKey, OVHCredentials.timestampHeaderName: timestamp, OVHCredentials.signatureHeaderName: signature]
            }
        }

        return nil
    }

    // Get and update the delta time between the API servers and your device.
    public func updateDeltaTime(completion: ((NSError?) -> Void)?) {
        Alamofire.request(.GET, {{projectName}}API.basePath + "/auth/time")
            .responseString(completionHandler: { response in
                if let value = response.result.value {
                    self.deltaTime = Int(value)! - Int(NSDate().timeIntervalSince1970)
                }

                var error: NSError?
                if let e = response.result.error {
                    error = e
                }

                if let completion = completion {
                    dispatch_async(dispatch_get_main_queue()) {
                        completion(error)
                    }
                }
            })
    }
}
